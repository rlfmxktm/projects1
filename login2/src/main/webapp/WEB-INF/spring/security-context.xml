<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">



	<bean id="customAccessDenied"
		class="org.zerock.security.CustomAccessDeniedHandler"></bean>
		
<!-- 	<bean id="customLoginSuccess" class="org.zerock.security.CustomLoginSuccessHandler"></bean> -->
	
	<bean id="customPasswordEncoder" class="org.zerock.security.CustomNoOpPasswordEncoder"></bean>

<!-- 	<bean id="bcryptPasswordEncoder"
		class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" /> -->

<!-- 	<bean id="customUserDetailsService"
		class="org.zerock.security.CustomUserDetailsService"></bean>
 -->

	<security:http>

<!-- 특정한 URI에 접근할 때 인터셉터를 이용해서 접근을 제한하는 설정은 <security: intercept-url>을 이용한다.
	 <security:intercept-url>은 pattern이라는 속성과 access라는 속성을 지정해야한다.pattern 속성은 말 그대로 URI의 패턴을 의미하고,
	 access의 경우는 권한을 체크한다. 위의 경우 '/sample/member'라는 URI는 'ROLLE_MEMBER'라는 권한이 있는 사용자만이 접근할 수 있다.	
 -->
	
		<security:intercept-url pattern="/sample/all" access="permitAll" />

		<security:intercept-url pattern="/sample/member" access="hasRole('ROLE_MEMBER')" />

		<security:intercept-url pattern="/sample/admin" access="hasRole('ROLE_ADMIN')" />

		<security:access-denied-handler	ref="customAccessDenied" />

<!-- 		<security:form-login login-page="/customLogin"
			authentication-success-handler-ref="customLoginSuccess" /> -->
			
			<security:form-login login-page="/customLogin" />

		<!-- <security:csrf disabled="true"/> -->

		<!-- 로그아웃의 특정한 URI  -->
		<security:logout logout-url="/customLogout"
			invalidate-session="true" />

		<security:remember-me
			data-source-ref="dataSource" token-validity-seconds="604800" />

		<security:logout logout-url="/customLogout"
			invalidate-session="true" delete-cookies="remember-me,JSESSION_ID" />



	</security:http>

	<security:authentication-manager>
	
		 <security:authentication-provider> 
		 
		 <security:jdbc-user-service data-source-ref="dataSource"/>
		 
		 <security:password-encoder ref="customPasswordEncoder"/>
		 
		</security:authentication-provider> 
		
	</security:authentication-manager>

<!-- 스프링 시큐리티가 동작하기 위해서는 authentication-manager라는 존재와 스프링 시큐리티의 시작 지점이 필요하기 때문에 위와 같이 최소한의 설정을 지정한 후에
실행. -->
<!-- 	<security:authentication-manager>

		<security:authentication-provider
			user-service-ref="customUserDetailsService">

			<security:password-encoder
				ref="bcryptPasswordEncoder" />

		</security:authentication-provider>

	</security:authentication-manager>
 -->
</beans>
